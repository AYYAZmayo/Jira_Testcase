// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : ocm_sp_18x4096_v1_0.v
// Device     : gemini
// LiteX sha1 : --------
// Date       : 2024-02-06 16:19:44
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module ocm_sp_18x4096 #(
	parameter IP_TYPE 		= "OCMGEN",
	parameter IP_VERSION 	= 32'h1, 
	parameter IP_ID 		= 32'h46244ec
)
(    input  wire   [11:0] addr_A,
    input  wire   [17:0] din_A,
    output wire   [17:0] dout_A,
    input  wire          clk_A,
    input  wire          wen_A,
    input  wire          ren_A
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire   [11:0] addr_A_1;
wire   [17:0] din_A_1;
reg    [17:0] dout_A_1 = 18'd0;
reg     [1:0] wen_A1 = 2'd0;
wire          wen_A_1;
wire          ren_A_1;
wire   [35:0] bram_out_A0;
wire   [35:0] bram_out_A1;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign addr_A_1 = addr_A;
assign din_A_1 = din_A;
assign dout_A = dout_A_1;
assign sys_clk = clk_A;
assign wen_A_1 = wen_A;
assign ren_A_1 = ren_A;
always @(*) begin
    wen_A1 <= 2'd0;
    if ((wen_A_1 == 1'd1)) begin
        wen_A1 <= 1'd1;
    end
end
always @(*) begin
    dout_A_1 <= 18'd0;
    dout_A_1[8:0] <= {bram_out_A0[16], bram_out_A0[7:0]};
    dout_A_1[17:9] <= {bram_out_A1[16], bram_out_A1[7:0]};
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

RS_TDP36K #(
	.INIT_i(36864'bx),
	.MODE_BITS(81'b10000010000000000000000000000000000000000100000100000000000000000000000000000000)
) RS_TDP36K (
	.ADDR_A1({addr_A_1[11:0], {3{1'd0}}}),
	.ADDR_A2({addr_A_1[11:0], {3{1'd0}}}),
	.BE_A1(2'd3),
	.BE_A2(2'd3),
	.CLK_A1(sys_clk),
	.CLK_A2(sys_clk),
	.REN_A1(ren_A_1),
	.REN_A2(ren_A_1),
	.WDATA_A1({din_A_1[8], {8{1'd0}}, din_A_1[7:0]}),
	.WDATA_A2(1'd0),
	.WEN_A1(wen_A1),
	.WEN_A2(wen_A1),
	.RDATA_A1(bram_out_A0[17:0]),
	.RDATA_A2(bram_out_A0[35:18])
);

RS_TDP36K #(
	.INIT_i(36864'bx),
	.MODE_BITS(81'b10000010000000000000000000000000000000000100000100000000000000000000000000000000)
) RS_TDP36K_1 (
	.ADDR_A1({addr_A_1[11:0], {3{1'd0}}}),
	.ADDR_A2({addr_A_1[11:0], {3{1'd0}}}),
	.BE_A1(2'd3),
	.BE_A2(2'd3),
	.CLK_A1(sys_clk),
	.CLK_A2(sys_clk),
	.REN_A1(ren_A_1),
	.REN_A2(ren_A_1),
	.WDATA_A1({din_A_1[17], {8{1'd0}}, din_A_1[16:9]}),
	.WDATA_A2(1'd0),
	.WEN_A1(wen_A1),
	.WEN_A2(wen_A1),
	.RDATA_A1(bram_out_A1[17:0]),
	.RDATA_A2(bram_out_A1[35:18])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-02-06 16:19:44.
//------------------------------------------------------------------------------
