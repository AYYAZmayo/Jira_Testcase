// Verilated -*- C++ -*-
// DESCRIPTION: Verilator output: Primary model header
//
// This header should be included by all source files instantiating the design.
// The class here is then constructed to instantiate the design.
// See the Verilator manual for examples.

#ifndef VERILATED_VCO_SIM_DSP_MULTIPLIER_ACCUM_WITH_ADD_NEG_H_
#define VERILATED_VCO_SIM_DSP_MULTIPLIER_ACCUM_WITH_ADD_NEG_H_  // guard

#include "verilated.h"

class Vco_sim_dsp_multiplier_accum_with_add_neg__Syms;
class Vco_sim_dsp_multiplier_accum_with_add_neg___024root;
class VerilatedFstC;
class Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2;
class Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1;
class Vco_sim_dsp_multiplier_accum_with_add_neg___024bmux__W1_S6;


// This class is the main interface to the Verilated model
class alignas(VL_CACHE_LINE_BYTES) Vco_sim_dsp_multiplier_accum_with_add_neg VL_NOT_FINAL : public VerilatedModel {
  private:
    // Symbol table holding complete model state (owned by this class)
    Vco_sim_dsp_multiplier_accum_with_add_neg__Syms* const vlSymsp;

  public:

    // PORTS
    // The application code writes and reads these signals to
    // propagate new values into/out from the Verilated model.

    // CELLS
    // Public to allow access to /* verilator public */ items.
    // Otherwise the application code can consider these internals.
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244355;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244375;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244369;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244388;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244395;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244390;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244396;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244393;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244372;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244373;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244374;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244351;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244346;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244371;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244370;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244339;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244340;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244348;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244398;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244356;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244357;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244358;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244359;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244360;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244361;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244362;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244363;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244364;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244365;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244366;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244367;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244368;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244353;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244338;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244376;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244377;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244389;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244381;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244382;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244383;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244392;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244386;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244354;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244387;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244380;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244385;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244391;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244384;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244379;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244394;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244378;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244352;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244350;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244349;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244347;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244345;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244344;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244343;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT3__Iz2* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244342;
    Vco_sim_dsp_multiplier_accum_with_add_neg_LUT4__Iz1* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244341;
    Vco_sim_dsp_multiplier_accum_with_add_neg___024bmux__W1_S6* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244307__DOT__mux;
    Vco_sim_dsp_multiplier_accum_with_add_neg___024bmux__W1_S6* const __PVT__co_sim_dsp_multiplier_accum_with_add_neg__DOT__netlist__DOT____024abc__0244240__024auto__024blifparse__02ecc__03a515__03aparse_blif__0244306__DOT__mux;

    // Root instance pointer to allow access to model internals,
    // including inlined /* verilator public_flat_* */ items.
    Vco_sim_dsp_multiplier_accum_with_add_neg___024root* const rootp;

    // CONSTRUCTORS
    /// Construct the model; called by application code
    /// If contextp is null, then the model will use the default global context
    /// If name is "", then makes a wrapper with a
    /// single model invisible with respect to DPI scope names.
    explicit Vco_sim_dsp_multiplier_accum_with_add_neg(VerilatedContext* contextp, const char* name = "TOP");
    explicit Vco_sim_dsp_multiplier_accum_with_add_neg(const char* name = "TOP");
    /// Destroy the model; called (often implicitly) by application code
    virtual ~Vco_sim_dsp_multiplier_accum_with_add_neg();
  private:
    VL_UNCOPYABLE(Vco_sim_dsp_multiplier_accum_with_add_neg);  ///< Copying not allowed

  public:
    // API METHODS
    /// Evaluate the model.  Application must call when inputs change.
    void eval() { eval_step(); eval_end_step(); }
    /// Evaluate when calling multiple units/models per time step.
    void eval_step();
    /// Evaluate at end of a timestep for tracing, when using eval_step().
    /// Application must call after all eval() and before time changes.
    void eval_end_step();
    /// Simulation complete, run final blocks.  Application must call on completion.
    void final();
    /// Are there scheduled events to handle?
    bool eventsPending();
    /// Returns time at next time slot. Aborts if !eventsPending()
    uint64_t nextTimeSlot();
    /// Trace signals in the model; called by application code
    void trace(VerilatedFstC* tfp, int levels, int options = 0);
    /// Retrieve name of this model instance (as passed to constructor).
    const char* name() const;

    // Abstract methods from VerilatedModel
    const char* hierName() const override final;
    const char* modelName() const override final;
    unsigned threads() const override final;
    /// Prepare for cloning the model at the process level (e.g. fork in Linux)
    /// Release necessary resources. Called before cloning.
    void prepareClone() const;
    /// Re-init after cloning the model at the process level (e.g. fork in Linux)
    /// Re-allocate necessary resources. Called after cloning.
    void atClone() const;
    std::unique_ptr<VerilatedTraceConfig> traceConfig() const override final;
};

#endif  // guard
