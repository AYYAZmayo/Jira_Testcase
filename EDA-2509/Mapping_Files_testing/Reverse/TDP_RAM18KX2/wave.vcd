$date
	Sun Feb 18 09:56:51 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module RS_TDP36K_tb $end
$var wire 18 ! dout_wrap [17:0] $end
$var wire 18 " dout_dut [17:0] $end
$var reg 3 # addr_B [2:0] $end
$var reg 1 $ clk $end
$var reg 32 % cycle [31:0] $end
$var reg 1 & ren_B $end
$var reg 1 ' rst $end
$var reg 1 ( valid_in $end
$var integer 32 ) i [31:0] $end
$var integer 32 * mismatch [31:0] $end
$scope module SBox_inst $end
$var wire 3 + addr [2:0] $end
$var wire 1 $ clk $end
$var wire 1 ' rst $end
$var wire 1 ( valid_in $end
$var reg 18 , dout [17:0] $end
$upscope $end
$scope module wrapper $end
$var wire 3 - addr_B [2:0] $end
$var wire 3 . addr_B_1 [2:0] $end
$var wire 1 $ clk $end
$var wire 18 / dout_B [17:0] $end
$var wire 1 & ren_B $end
$var wire 1 0 ren_B_1 $end
$var wire 1 1 sys_clk $end
$var wire 18 2 dout_B_1 [17:0] $end
$var wire 36 3 bram_out_B [35:0] $end
$var parameter 32 4 IP_ID $end
$var parameter 24 5 IP_TYPE $end
$var parameter 32 6 IP_VERSION $end
$scope module RS_TDP36K $end
$var wire 15 7 ADDR_A1 [14:0] $end
$var wire 14 8 ADDR_A2 [13:0] $end
$var wire 15 9 ADDR_B1 [14:0] $end
$var wire 14 : ADDR_B2 [13:0] $end
$var wire 2 ; BE_A1 [1:0] $end
$var wire 2 < BE_A2 [1:0] $end
$var wire 2 = BE_B1 [1:0] $end
$var wire 2 > BE_B2 [1:0] $end
$var wire 1 ? CLK_A1 $end
$var wire 1 @ CLK_A2 $end
$var wire 1 1 CLK_B1 $end
$var wire 1 1 CLK_B2 $end
$var wire 1 A FLUSH1 $end
$var wire 1 B FLUSH2 $end
$var wire 1 C REN_A1 $end
$var wire 1 D REN_A2 $end
$var wire 1 0 REN_B1 $end
$var wire 1 0 REN_B2 $end
$var wire 18 E WDATA_A1 [17:0] $end
$var wire 18 F WDATA_A2 [17:0] $end
$var wire 18 G WDATA_B1 [17:0] $end
$var wire 18 H WDATA_B2 [17:0] $end
$var wire 1 I WEN_A1 $end
$var wire 1 J WEN_A2 $end
$var wire 1 K WEN_B1 $end
$var wire 1 L WEN_B2 $end
$var wire 18 M RDATA_B2 [17:0] $end
$var wire 18 N RDATA_B1 [17:0] $end
$var wire 18 O RDATA_A2 [17:0] $end
$var wire 18 P RDATA_A1 [17:0] $end
$var parameter 1 Q FMODE1_i $end
$var parameter 1 R FMODE2_i $end
$var parameter 18432 S INIT1 $end
$var parameter 18432 T INIT2 $end
$var parameter 36864 U INIT_i $end
$var parameter 81 V MODE_BITS $end
$var parameter 1 W POWERDN1_i $end
$var parameter 1 X POWERDN2_i $end
$var parameter 1 Y PROTECT1_i $end
$var parameter 1 Z PROTECT2_i $end
$var parameter 3 [ RMODE_A1_i $end
$var parameter 3 \ RMODE_A2_i $end
$var parameter 3 ] RMODE_B1_i $end
$var parameter 3 ^ RMODE_B2_i $end
$var parameter 1 _ SLEEP1_i $end
$var parameter 1 ` SLEEP2_i $end
$var parameter 1 a SPLIT_i $end
$var parameter 1 b SYNC_FIFO1_i $end
$var parameter 1 c SYNC_FIFO2_i $end
$var parameter 12 d UPAE1_i $end
$var parameter 11 e UPAE2_i $end
$var parameter 12 f UPAF1_i $end
$var parameter 11 g UPAF2_i $end
$var parameter 3 h WMODE_A1_i $end
$var parameter 3 i WMODE_A2_i $end
$var parameter 3 j WMODE_B1_i $end
$var parameter 3 k WMODE_B2_i $end
$var parameter 32768 l data_i $end
$var parameter 16384 m data_i1 $end
$var parameter 16384 n data_i2 $end
$var parameter 4096 o pairty_i $end
$var parameter 2048 p pairty_i1 $end
$var parameter 2048 q pairty_i2 $end
$scope function data $end
$var integer 32 r i [31:0] $end
$upscope $end
$scope function data1 $end
$var integer 32 s i [31:0] $end
$upscope $end
$scope function data2 $end
$var integer 32 t i [31:0] $end
$upscope $end
$scope function parity $end
$var integer 32 u i [31:0] $end
$upscope $end
$scope function parity1 $end
$var integer 32 v i [31:0] $end
$upscope $end
$scope function parity2 $end
$var integer 32 w i [31:0] $end
$upscope $end
$scope begin genblk1 $end
$scope begin genblk1 $end
$var wire 4 x WPARITY_B22 [3:0] $end
$var wire 4 y WPARITY_B11 [3:0] $end
$var wire 4 z WPARITY_A22 [3:0] $end
$var wire 4 { WPARITY_A11 [3:0] $end
$var wire 32 | WDATA_B22 [31:0] $end
$var wire 32 } WDATA_B11 [31:0] $end
$var wire 32 ~ WDATA_A22 [31:0] $end
$var wire 32 !" WDATA_A11 [31:0] $end
$var wire 4 "" RPARITY_B22 [3:0] $end
$var wire 4 #" RPARITY_B11 [3:0] $end
$var wire 4 $" RPARITY_A22 [3:0] $end
$var wire 4 %" RPARITY_A11 [3:0] $end
$var wire 32 &" RDATA_B22 [31:0] $end
$var wire 32 '" RDATA_B11 [31:0] $end
$var wire 32 (" RDATA_A22 [31:0] $end
$var wire 32 )" RDATA_A11 [31:0] $end
$var parameter 32 *" read_mode_A1 $end
$var parameter 32 +" read_mode_A2 $end
$var parameter 32 ," read_mode_B1 $end
$var parameter 32 -" read_mode_B2 $end
$var parameter 32 ." write_mode_A1 $end
$var parameter 32 /" write_mode_A2 $end
$var parameter 32 0" write_mode_B1 $end
$var parameter 32 1" write_mode_B2 $end
$scope module TDP_RAM18KX2_inst $end
$var wire 14 2" ADDR_A1 [13:0] $end
$var wire 14 3" ADDR_A2 [13:0] $end
$var wire 14 4" ADDR_B1 [13:0] $end
$var wire 14 5" ADDR_B2 [13:0] $end
$var wire 2 6" BE_A1 [1:0] $end
$var wire 2 7" BE_A2 [1:0] $end
$var wire 2 8" BE_B1 [1:0] $end
$var wire 2 9" BE_B2 [1:0] $end
$var wire 1 ? CLK_A1 $end
$var wire 1 @ CLK_A2 $end
$var wire 1 1 CLK_B1 $end
$var wire 1 1 CLK_B2 $end
$var wire 1 C REN_A1 $end
$var wire 1 D REN_A2 $end
$var wire 1 0 REN_B1 $end
$var wire 1 0 REN_B2 $end
$var wire 16 :" WDATA_A1 [15:0] $end
$var wire 16 ;" WDATA_A2 [15:0] $end
$var wire 16 <" WDATA_B1 [15:0] $end
$var wire 16 =" WDATA_B2 [15:0] $end
$var wire 1 I WEN_A1 $end
$var wire 1 J WEN_A2 $end
$var wire 1 K WEN_B1 $end
$var wire 1 L WEN_B2 $end
$var wire 2 >" WPARITY_A1 [1:0] $end
$var wire 2 ?" WPARITY_A2 [1:0] $end
$var wire 2 @" WPARITY_B1 [1:0] $end
$var wire 2 A" WPARITY_B2 [1:0] $end
$var wire 10 B" b2_addr [9:0] $end
$var wire 10 C" b1_addr [9:0] $end
$var wire 10 D" a2_addr [9:0] $end
$var wire 10 E" a1_addr [9:0] $end
$var parameter 32 F" A1_DATA_READ_WIDTH $end
$var parameter 32 G" A1_DATA_WIDTH $end
$var parameter 32 H" A1_DATA_WRITE_WIDTH $end
$var parameter 32 I" A1_PARITY_READ_WIDTH $end
$var parameter 32 J" A1_PARITY_WIDTH $end
$var parameter 32 K" A1_PARITY_WRITE_WIDTH $end
$var parameter 32 L" A1_READ_ADDR_WIDTH $end
$var parameter 32 M" A1_WRITE_ADDR_WIDTH $end
$var parameter 32 N" A2_DATA_READ_WIDTH $end
$var parameter 32 O" A2_DATA_WIDTH $end
$var parameter 32 P" A2_DATA_WRITE_WIDTH $end
$var parameter 32 Q" A2_PARITY_READ_WIDTH $end
$var parameter 32 R" A2_PARITY_WIDTH $end
$var parameter 32 S" A2_PARITY_WRITE_WIDTH $end
$var parameter 32 T" A2_READ_ADDR_WIDTH $end
$var parameter 32 U" A2_WRITE_ADDR_WIDTH $end
$var parameter 32 V" B1_DATA_READ_WIDTH $end
$var parameter 32 W" B1_DATA_WIDTH $end
$var parameter 32 X" B1_DATA_WRITE_WIDTH $end
$var parameter 32 Y" B1_PARITY_READ_WIDTH $end
$var parameter 32 Z" B1_PARITY_WIDTH $end
$var parameter 32 [" B1_PARITY_WRITE_WIDTH $end
$var parameter 32 \" B1_READ_ADDR_WIDTH $end
$var parameter 32 ]" B1_WRITE_ADDR_WIDTH $end
$var parameter 32 ^" B2_DATA_READ_WIDTH $end
$var parameter 32 _" B2_DATA_WIDTH $end
$var parameter 32 `" B2_DATA_WRITE_WIDTH $end
$var parameter 32 a" B2_PARITY_READ_WIDTH $end
$var parameter 32 b" B2_PARITY_WIDTH $end
$var parameter 32 c" B2_PARITY_WRITE_WIDTH $end
$var parameter 32 d" B2_READ_ADDR_WIDTH $end
$var parameter 32 e" B2_WRITE_ADDR_WIDTH $end
$var parameter 16384 f" INIT1 $end
$var parameter 2048 g" INIT1_PARITY $end
$var parameter 16384 h" INIT2 $end
$var parameter 2048 i" INIT2_PARITY $end
$var parameter 32 j" RAM1_ADDR_WIDTH $end
$var parameter 32 k" RAM1_DATA_WIDTH $end
$var parameter 32 l" RAM1_PARITY_WIDTH $end
$var parameter 32 m" RAM2_ADDR_WIDTH $end
$var parameter 32 n" RAM2_DATA_WIDTH $end
$var parameter 32 o" RAM2_PARITY_WIDTH $end
$var parameter 32 p" READ_WIDTH_A1 $end
$var parameter 32 q" READ_WIDTH_A2 $end
$var parameter 32 r" READ_WIDTH_B1 $end
$var parameter 32 s" READ_WIDTH_B2 $end
$var parameter 32 t" WRITE_WIDTH_A1 $end
$var parameter 32 u" WRITE_WIDTH_A2 $end
$var parameter 32 v" WRITE_WIDTH_B1 $end
$var parameter 32 w" WRITE_WIDTH_B2 $end
$var reg 16 x" RDATA_A1 [15:0] $end
$var reg 16 y" RDATA_A2 [15:0] $end
$var reg 16 z" RDATA_B1 [15:0] $end
$var reg 16 {" RDATA_B2 [15:0] $end
$var reg 2 |" RPARITY_A1 [1:0] $end
$var reg 2 }" RPARITY_A2 [1:0] $end
$var reg 2 ~" RPARITY_B1 [1:0] $end
$var reg 2 !# RPARITY_B2 [1:0] $end
$var reg 10 "# collision_a2_address [9:0] $end
$var reg 1 ## collision_a2_read_flag $end
$var reg 1 $# collision_a2_write_flag $end
$var reg 10 %# collision_a_address [9:0] $end
$var reg 1 &# collision_a_read_flag $end
$var reg 1 '# collision_a_write_flag $end
$var reg 10 (# collision_b2_address [9:0] $end
$var reg 1 )# collision_b2_read_flag $end
$var reg 1 *# collision_b2_write_flag $end
$var reg 10 +# collision_b_address [9:0] $end
$var reg 1 ,# collision_b_read_flag $end
$var reg 1 -# collision_b_write_flag $end
$var reg 1 .# collision_window $end
$var integer 32 /# a [31:0] $end
$var integer 32 0# b [31:0] $end
$var integer 32 1# c [31:0] $end
$var integer 32 2# f [31:0] $end
$var integer 32 3# g [31:0] $end
$var integer 32 4# h [31:0] $end
$var integer 32 5# i [31:0] $end
$var integer 32 6# j [31:0] $end
$var integer 32 7# k [31:0] $end
$var integer 32 8# l [31:0] $end
$var integer 32 9# m [31:0] $end
$var integer 32 :# p [31:0] $end
$var integer 32 ;# r [31:0] $end
$scope function calc_data_width $end
$var integer 32 <# width [31:0] $end
$upscope $end
$scope function calc_depth $end
$var integer 32 =# width [31:0] $end
$upscope $end
$scope function calc_parity_width $end
$var integer 32 ># width [31:0] $end
$upscope $end
$scope function find_a1_read_index $end
$var reg 14 ?# addr [13:0] $end
$upscope $end
$scope function find_a1_write_index $end
$var reg 14 @# addr [13:0] $end
$upscope $end
$scope function find_a2_read_index $end
$var reg 14 A# addr [13:0] $end
$upscope $end
$scope function find_a2_write_index $end
$var reg 14 B# addr [13:0] $end
$upscope $end
$scope function find_b1_read_index $end
$var reg 14 C# addr [13:0] $end
$upscope $end
$scope function find_b1_write_index $end
$var reg 14 D# addr [13:0] $end
$upscope $end
$scope function find_b2_read_index $end
$var reg 14 E# addr [13:0] $end
$upscope $end
$scope function find_b2_write_index $end
$var reg 14 F# addr [13:0] $end
$upscope $end
$scope begin parity_RAM1 $end
$var integer 32 G# f_p [31:0] $end
$var integer 32 H# g_p [31:0] $end
$var integer 32 I# h_p [31:0] $end
$var integer 32 J# i_p [31:0] $end
$var integer 32 K# j_p [31:0] $end
$var integer 32 L# k_p [31:0] $end
$var integer 32 M# m_p [31:0] $end
$upscope $end
$scope begin parity_RAM2 $end
$var integer 32 N# f_p2 [31:0] $end
$var integer 32 O# g_p2 [31:0] $end
$var integer 32 P# h_p2 [31:0] $end
$var integer 32 Q# i_p2 [31:0] $end
$var integer 32 R# j_p2 [31:0] $end
$var integer 32 S# k_p2 [31:0] $end
$var integer 32 T# m_p2 [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$scope task compare $end
$var integer 32 U# cycle [31:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b10010 w"
b10010 v"
b10010 u"
b10010 t"
b10010 s"
b10010 r"
b10010 q"
b10010 p"
b10 o"
b10000 n"
b1010 m"
b10 l"
b10000 k"
b1010 j"
b0 i"
b0 h"
b1000011110 g"
b1100110101010101100001001010011010101101100100101101111011101101011101110010010 f"
b1010 e"
b1010 d"
b10 c"
b10 b"
b10 a"
b10000 `"
b10000 _"
b10000 ^"
b1010 ]"
b1010 \"
b10 ["
b10 Z"
b10 Y"
b10000 X"
b10000 W"
b10000 V"
b1010 U"
b1010 T"
b10 S"
b10 R"
b10 Q"
b10000 P"
b10000 O"
b10000 N"
b1010 M"
b1010 L"
b10 K"
b10 J"
b10 I"
b10000 H"
b10000 G"
b10000 F"
b10010 1"
b10010 0"
b10010 /"
b10010 ."
b10010 -"
b10010 ,"
b10010 +"
b10010 *"
b0 q
b1000011110 p
b100000000100110010 o
b0 n
b1100110101010101100001001010011010101101100100101101111011101101011101110010010 m
b11001101010101000000000000000001100001001010011000000000000000001010110110010010000000000000000011011110111011000000000000000001011101110010010 l
b10 k
b10 j
b10 i
b10 h
b0 g
b0 f
b0 e
b0 d
0c
0b
1a
0`
0_
b10 ^
b10 ]
b10 \
b10 [
0Z
0Y
0X
0W
b1001001001000000000000000000000000000000010010010010000000000000000000000000001 V
b100110011010101010001100001001010011010101011011001001110110111101110110101011101110010010 U
b0 T
b100110011010101010001100001001010011010101011011001001110110111101110110101011101110010010 S
0R
0Q
b1 6
b10011110100001101001101 5
b10110011001011001110101100 4
$end
#0
$dumpvars
bx U#
bx T#
bx S#
bx R#
bx Q#
b10 P#
b10000000000 O#
b100000000000 N#
bx M#
bx L#
bx K#
bx J#
b10 I#
b10000000000 H#
b100000000000 G#
bx F#
bx E#
bx D#
bx C#
bx B#
bx A#
bx @#
bx ?#
bx >#
bx =#
bx <#
bx ;#
bx :#
bx 9#
bx 8#
bx 7#
bx 6#
bx 5#
b10000 4#
b10000000000 3#
b100000000000000 2#
b10000 1#
b10000000000 0#
b100000000000000 /#
1.#
0-#
0,#
b0 +#
0*#
0)#
b0 (#
0'#
0&#
b0 %#
0$#
0##
b0 "#
b0 !#
b0 ~"
b0 }"
b0 |"
b0 {"
b0 z"
b0 y"
b0 x"
bz E"
bz D"
b0 C"
b0 B"
bz A"
bz @"
b0 ?"
b0 >"
bz ="
bz <"
b0 ;"
b0 :"
bz 9"
bz 8"
b0 7"
b0 6"
b0 5"
b0 4"
bz 3"
bz 2"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0zzzzzzzzzzzzzzzz }
b0zzzzzzzzzzzzzzzz |
b0 {
b0 z
b0zz y
b0zz x
bx w
bx v
bx u
bx t
bx s
bx r
b0 P
b0 O
b0 N
b0 M
zL
zK
0J
0I
bz H
bz G
b0 F
b0 E
zD
zC
zB
zA
0@
0?
bz >
bz =
b0 <
b0 ;
b0 :
b0 9
bz 8
bz 7
b0 3
b0 2
01
00
b0 /
b0 .
b0 -
bx ,
b0 +
b0 *
b0 )
0(
0'
0&
b0 %
0$
b0 #
bx "
b0 !
$end
#10000
b0 "
b0 ,
11
1$
#20000
10
1&
b1 )
b1 U#
b1 %
01
0$
1(
1'
#30000
b101011101110010010 !
b101011101110010010 /
b101011101110010010 2
b101011101110010010 3
b101011101110010010 N
b101011101110010010 "
b101011101110010010 ,
b1011101110010010 '"
b1011101110010010 z"
b10 #"
b10 ~"
1)#
b10000 ;#
1,#
b10000 9#
b10 T#
b0 E#
b10 M#
b0 C#
11
1$
#31000
0)#
0,#
#40000
b1 C"
b10000 4"
b1 B"
b10000 9
b10000 :
b10000 5"
b1 .
b1 #
b1 +
b1 -
b10 )
b10 U#
b10 %
01
0$
#50000
b110110111101110110 !
b110110111101110110 /
b110110111101110110 2
b110110111101110110 3
b110110111101110110 N
b110110111101110110 "
b110110111101110110 ,
b11 #"
b11 ~"
b110111101110110 '"
b110111101110110 z"
b10 M#
b10 T#
1,#
b1 +#
b10000 9#
b10000 C#
1)#
b1 (#
b10000 ;#
b10000 E#
11
1$
#51000
0,#
0)#
#60000
b10 C"
b100000 4"
b10 B"
b100000 9
b100000 :
b100000 5"
b10 .
b10 #
b10 +
b10 -
b11 )
b11 U#
b11 %
01
0$
#70000
b10101011011001001 !
b10101011011001001 /
b10101011011001001 2
b10101011011001001 3
b10101011011001001 N
b10101011011001001 "
b10101011011001001 ,
b1 #"
b1 ~"
b101011011001001 '"
b101011011001001 z"
b10 T#
b10 M#
1)#
b10 (#
b10000 ;#
b100000 E#
1,#
b10 +#
b10000 9#
b100000 C#
11
1$
#71000
0)#
0,#
#80000
b11 C"
b110000 4"
b11 B"
b110000 9
b110000 :
b110000 5"
b11 .
b11 #
b11 +
b11 -
b100 )
b100 U#
b100 %
01
0$
#90000
b1100001001010011 !
b1100001001010011 /
b1100001001010011 2
b1100001001010011 3
b1100001001010011 N
b1100001001010011 "
b1100001001010011 ,
b0 #"
b0 ~"
b1100001001010011 '"
b1100001001010011 z"
b10 M#
b10 T#
1,#
b11 +#
b10000 9#
b110000 C#
1)#
b11 (#
b10000 ;#
b110000 E#
11
1$
#91000
0,#
0)#
#100000
b100 C"
b1000000 4"
b100 B"
b1000000 9
b1000000 :
b1000000 5"
b100 .
b100 #
b100 +
b100 -
b101 )
b101 U#
b101 %
01
0$
#110000
b100110011010101010 !
b100110011010101010 /
b100110011010101010 2
b100110011010101010 3
b100110011010101010 N
b100110011010101010 "
b100110011010101010 ,
b10 #"
b10 ~"
b110011010101010 '"
b110011010101010 z"
b10 T#
b10 M#
1)#
b100 (#
b10000 ;#
b1000000 E#
1,#
b100 +#
b10000 9#
b1000000 C#
11
1$
#111000
0)#
0,#
#120000
01
0$
#130000
b10 M#
b10 T#
1,#
b10000 9#
1)#
b10000 ;#
11
1$
#131000
0,#
0)#
#140000
01
0$
#150000
b10 T#
b10 M#
1)#
b10000 ;#
1,#
b10000 9#
11
1$
#151000
0)#
0,#
#160000
01
0$
#170000
b10 M#
b10 T#
1,#
b10000 9#
1)#
b10000 ;#
11
1$
#171000
0,#
0)#
#180000
01
0$
#190000
b10 T#
b10 M#
1)#
b10000 ;#
1,#
b10000 9#
11
1$
#191000
0)#
0,#
#200000
01
0$
#210000
b10 M#
b10 T#
1,#
b10000 9#
1)#
b10000 ;#
11
1$
#211000
0,#
0)#
#220000
01
0$
#230000
b10 T#
b10 M#
1)#
b10000 ;#
1,#
b10000 9#
11
1$
#231000
0)#
0,#
#240000
01
0$
#250000
b10 M#
b10 T#
1,#
b10000 9#
1)#
b10000 ;#
11
1$
#251000
0,#
0)#
#260000
01
0$
#270000
b10 T#
b10 M#
1)#
b10000 ;#
1,#
b10000 9#
11
1$
