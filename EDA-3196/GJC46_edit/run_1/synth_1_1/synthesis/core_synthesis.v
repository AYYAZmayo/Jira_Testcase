/* Generated by Yosys 0.38 (git sha1 2b36bfab5, gcc 11.2.1 -fPIC -Os) */

module GJC46_edit(reset, enable_n, data_i, bitslip_ctrl_n, clkGHz, data_o, ready);
  input bitslip_ctrl_n;
  input clkGHz;
  input data_i;
  output data_o;
  input enable_n;
  output ready;
  input reset;
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire bitslip_ctrl;
  wire bitslip_ctrl_n;
  wire bitslip_ctrl_n_buf;
  wire buf_output_enable;
  wire clkGHz;
  wire clkGHz_buf;
  wire clkGHz_clkbuf;
  wire data_i;
  wire data_i_buf;
  wire data_i_delay;
  wire \data_i_serdes[0] ;
  wire \data_i_serdes[1] ;
  wire \data_i_serdes[2] ;
  wire \data_i_serdes[3] ;
  wire \data_i_serdes[4] ;
  wire \data_i_serdes[5] ;
  wire \data_i_serdes[6] ;
  wire \data_i_serdes[7] ;
  wire \data_i_serdes[8] ;
  wire \data_i_serdes[9] ;
  wire \data_i_serdes_reg[0] ;
  wire \data_i_serdes_reg[1] ;
  wire \data_i_serdes_reg[2] ;
  wire \data_i_serdes_reg[3] ;
  wire \data_i_serdes_reg[4] ;
  wire \data_i_serdes_reg[5] ;
  wire \data_i_serdes_reg[6] ;
  wire \data_i_serdes_reg[7] ;
  wire \data_i_serdes_reg[8] ;
  wire \data_i_serdes_reg[9] ;
  wire data_i_valid;
  wire data_o;
  wire delay_in;
  wire delay_out;
  wire enable_buf;
  wire enable_buf_n;
  wire enable_n;
  wire fabric_clk_div;
  wire pll_clk;
  wire ready;
  wire ready_buf;
  wire reset;
  wire reset_buf;
  wire reset_buf_n;
  wire serdes_dpa_lock;
  wire \wait_pll[0] ;
  wire \wait_pll[1] ;
  wire \wait_pll[2] ;
  wire \wait_pll[3] ;
  wire \wait_pll[4] ;
  wire \wait_pll[5] ;
  wire \wait_pll[6] ;
  wire \wait_pll[7] ;
  LUT6 #(
    .INIT_VALUE(64'b1000000000000000000000000000000000000000000000000000000000000000)
  ) _21_ (
    .A({ \wait_pll[2] , \wait_pll[1] , \wait_pll[0] , \wait_pll[5] , \wait_pll[4] , \wait_pll[3]  }),
    .Y(_09_)
  );
  LUT5 #(
    .INIT_VALUE(32'd2147483648)
  ) _22_ (
    .A({ _09_, \wait_pll[7] , \wait_pll[6] , data_i_valid, serdes_dpa_lock }),
    .Y(_00_)
  );
  LUT4 #(
    .INIT_VALUE(16'b1000000000000000)
  ) _23_ (
    .A({ _09_, \wait_pll[7] , \wait_pll[6] , serdes_dpa_lock }),
    .Y(ready_buf)
  );
  LUT3 #(
    .INIT_VALUE(8'b01111000)
  ) _24_ (
    .A({ \wait_pll[7] , _09_, \wait_pll[6]  }),
    .Y(_08_)
  );
  LUT2 #(
    .INIT_VALUE(4'b0110)
  ) _25_ (
    .A({ _09_, \wait_pll[6]  }),
    .Y(_07_)
  );
  LUT6 #(
    .INIT_VALUE(64'b0111111111111111111111111111111110000000000000000000000000000000)
  ) _26_ (
    .A({ \wait_pll[5] , \wait_pll[2] , \wait_pll[1] , \wait_pll[0] , \wait_pll[4] , \wait_pll[3]  }),
    .Y(_06_)
  );
  LUT5 #(
    .INIT_VALUE(32'd2147450880)
  ) _27_ (
    .A({ \wait_pll[4] , \wait_pll[2] , \wait_pll[1] , \wait_pll[0] , \wait_pll[3]  }),
    .Y(_05_)
  );
  LUT4 #(
    .INIT_VALUE(16'b0111111110000000)
  ) _28_ (
    .A({ \wait_pll[3] , \wait_pll[2] , \wait_pll[1] , \wait_pll[0]  }),
    .Y(_04_)
  );
  LUT3 #(
    .INIT_VALUE(8'b01111000)
  ) _29_ (
    .A({ \wait_pll[2] , \wait_pll[1] , \wait_pll[0]  }),
    .Y(_03_)
  );
  LUT2 #(
    .INIT_VALUE(4'b0110)
  ) _30_ (
    .A({ \wait_pll[1] , \wait_pll[0]  }),
    .Y(_02_)
  );
  LUT3 #(
    .INIT_VALUE(8'b01111111)
  ) _31_ (
    .A({ _09_, \wait_pll[7] , \wait_pll[6]  }),
    .Y(_10_)
  );
  LUT1 #(
    .INIT_VALUE(2'b01)
  ) _32_ (
    .A(bitslip_ctrl_n_buf),
    .Y(bitslip_ctrl)
  );
  LUT1 #(
    .INIT_VALUE(2'b01)
  ) _33_ (
    .A(enable_buf_n),
    .Y(enable_buf)
  );
  LUT1 #(
    .INIT_VALUE(2'b01)
  ) _34_ (
    .A(\wait_pll[0] ),
    .Y(_01_)
  );
  LUT1 #(
    .INIT_VALUE(2'b01)
  ) _35_ (
    .A(reset_buf),
    .Y(reset_buf_n)
  );
  DFFRE _36_ (
    .C(pll_clk),
    .D(_01_),
    .E(_10_),
    .Q(\wait_pll[0] ),
    .R(reset_buf_n)
  );
  DFFRE _37_ (
    .C(pll_clk),
    .D(_02_),
    .E(_10_),
    .Q(\wait_pll[1] ),
    .R(reset_buf_n)
  );
  DFFRE _38_ (
    .C(pll_clk),
    .D(_03_),
    .E(_10_),
    .Q(\wait_pll[2] ),
    .R(reset_buf_n)
  );
  DFFRE _39_ (
    .C(pll_clk),
    .D(_04_),
    .E(_10_),
    .Q(\wait_pll[3] ),
    .R(reset_buf_n)
  );
  DFFRE _40_ (
    .C(pll_clk),
    .D(_05_),
    .E(_10_),
    .Q(\wait_pll[4] ),
    .R(reset_buf_n)
  );
  DFFRE _41_ (
    .C(pll_clk),
    .D(_06_),
    .E(_10_),
    .Q(\wait_pll[5] ),
    .R(reset_buf_n)
  );
  DFFRE _42_ (
    .C(pll_clk),
    .D(_07_),
    .E(_10_),
    .Q(\wait_pll[6] ),
    .R(reset_buf_n)
  );
  DFFRE _43_ (
    .C(pll_clk),
    .D(_08_),
    .E(_10_),
    .Q(\wait_pll[7] ),
    .R(reset_buf_n)
  );
  DFFRE _44_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[0] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[0] ),
    .R(reset_buf_n)
  );
  DFFRE _45_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[1] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[1] ),
    .R(reset_buf_n)
  );
  DFFRE _46_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[2] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[2] ),
    .R(reset_buf_n)
  );
  DFFRE _47_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[3] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[3] ),
    .R(reset_buf_n)
  );
  DFFRE _48_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[4] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[4] ),
    .R(reset_buf_n)
  );
  DFFRE _49_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[5] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[5] ),
    .R(reset_buf_n)
  );
  DFFRE _50_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[6] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[6] ),
    .R(reset_buf_n)
  );
  DFFRE _51_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[7] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[7] ),
    .R(reset_buf_n)
  );
  DFFRE _52_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[8] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[8] ),
    .R(reset_buf_n)
  );
  DFFRE _53_ (
    .C(fabric_clk_div),
    .D(\data_i_serdes[9] ),
    .E(_00_),
    .Q(\data_i_serdes_reg[9] ),
    .R(reset_buf_n)
  );
  O_FAB _54_ (
    .I(enable_buf),
    .O(_11_)
  );
  O_FAB _55_ (
    .I(reset_buf_n),
    .O(_12_)
  );
  O_FAB _56_ (
    .I(reset_buf_n),
    .O(_13_)
  );
  O_FAB _57_ (
    .I(buf_output_enable),
    .O(_14_)
  );
  I_FAB _58_ (
    .I(_15_),
    .O(buf_output_enable)
  );
  I_FAB _59_ (
    .I(_16_),
    .O(data_i_valid)
  );
  I_FAB _60_ (
    .I(_17_),
    .O(serdes_dpa_lock)
  );
  O_FAB _61_ (
    .I(bitslip_ctrl),
    .O(_18_)
  );
  O_FAB _62_ (
    .I(enable_buf),
    .O(_19_)
  );
  O_FAB _63_ (
    .I(enable_buf),
    .O(_20_)
  );
  I_BUF #(
    .WEAK_KEEPER("PULLUP")
  ) bitslip_buffer0 (
    .EN(1'b1),
    .I(bitslip_ctrl_n),
    .O(bitslip_ctrl_n_buf)
  );
  I_BUF #(
    .WEAK_KEEPER("PULLDOWN")
  ) clk_i_buffer0 (
    .EN(1'b1),
    .I(clkGHz),
    .O(clkGHz_buf)
  );
  PLL #(
    .DEV_FAMILY("VIRGO"),
    .DIVIDE_CLK_IN_BY_2("FALSE"),
    .PLL_DIV(32'sd2),
    .PLL_MULT(32'sd50),
    .PLL_MULT_FRAC(32'sd0),
    .PLL_POST_DIV(32'sd17)
  ) clk_pll_gen0 (
    .CLK_IN(clkGHz_clkbuf),
    .FAST_CLK(pll_clk),
    .PLL_EN(1'b1)
  );
  CLK_BUF clock_buffer (
    .I(clkGHz_buf),
    .O(clkGHz_clkbuf)
  );
  O_BUFT counter_o_buft (
    .I(delay_out),
    .O(data_o),
    .T(_14_)
  );
  O_DELAY #(
    .DELAY(32'sd0)
  ) counter_o_delay (
    .CLK_IN(clkGHz_clkbuf),
    .DLY_ADJ(1'b0),
    .DLY_INCDEC(1'b0),
    .DLY_LOAD(1'b0),
    .I(delay_in),
    .O(delay_out)
  );
  O_SERDES #(
    .DATA_RATE("SDR"),
    .WIDTH(32'sd10)
  ) counter_o_serdes (
    .CLK_IN(clkGHz_clkbuf),
    .D({ \data_i_serdes_reg[9] , \data_i_serdes_reg[8] , \data_i_serdes_reg[7] , \data_i_serdes_reg[6] , \data_i_serdes_reg[5] , \data_i_serdes_reg[4] , \data_i_serdes_reg[3] , \data_i_serdes_reg[2] , \data_i_serdes_reg[1] , \data_i_serdes_reg[0]  }),
    .DATA_VALID(_11_),
    .OE_IN(_20_),
    .OE_OUT(_15_),
    .PLL_CLK(pll_clk),
    .PLL_LOCK(1'b1),
    .Q(delay_in),
    .RST(_13_)
  );
  I_BUF #(
    .WEAK_KEEPER("PULLDOWN")
  ) data_i_buffer0 (
    .EN(1'b1),
    .I(data_i),
    .O(data_i_buf)
  );
  I_BUF #(
    .WEAK_KEEPER("PULLUP")
  ) enable_buffer0 (
    .EN(1'b1),
    .I(enable_n),
    .O(enable_buf_n)
  );
  I_DELAY #(
    .DELAY(32'sd0)
  ) input_data_delay (
    .CLK_IN(clkGHz_clkbuf),
    .DLY_ADJ(1'b0),
    .DLY_INCDEC(1'b0),
    .DLY_LOAD(1'b0),
    .I(data_i_buf),
    .O(data_i_delay)
  );
  I_SERDES #(
    .DATA_RATE("SDR"),
    .DPA_MODE("DPA"),
    .WIDTH(32'sd10)
  ) input_data_serdes (
    .BITSLIP_ADJ(_18_),
    .CLK_IN(clkGHz_clkbuf),
    .CLK_OUT(fabric_clk_div),
    .D(data_i_delay),
    .DATA_VALID(_16_),
    .DPA_LOCK(_17_),
    .EN(_19_),
    .PLL_CLK(pll_clk),
    .PLL_LOCK(1'b1),
    .Q({ \data_i_serdes[9] , \data_i_serdes[8] , \data_i_serdes[7] , \data_i_serdes[6] , \data_i_serdes[5] , \data_i_serdes[4] , \data_i_serdes[3] , \data_i_serdes[2] , \data_i_serdes[1] , \data_i_serdes[0]  }),
    .RST(_12_)
  );
  O_BUFT ready_o_buffer0 (
    .I(ready_buf),
    .O(ready),
    .T(1'b1)
  );
  I_BUF #(
    .WEAK_KEEPER("PULLDOWN")
  ) reset_buffer0 (
    .EN(1'b1),
    .I(reset),
    .O(reset_buf)
  );
endmodule
