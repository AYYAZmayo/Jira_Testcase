/* Generated by Yosys 0.38 (git sha1 d2189b06a, gcc 11.2.1 -fPIC -Os) */

module dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2(clk, reset, subtract, A1, A2, B1, B2, P);
  input [9:0] A1;
  input [9:0] A2;
  input [8:0] B1;
  input [8:0] B2;
  output [37:0] P;
  input clk;
  input reset;
  input subtract;
  wire [31:0] _000_;
  wire [32:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire [32:0] _004_;
  wire [31:0] _005_;
  wire [32:0] _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire [32:0] _009_;
  wire [31:0] _010_;
  wire [31:0] _011_;
  wire [9:0] A1;
  wire [9:0] A2;
  wire [8:0] B1;
  wire [8:0] B2;
  wire [37:0] P;
  wire [63:0] add_or_sub;
  wire clk;
  wire [18:0] mult1;
  wire [18:0] mult2;
  wire reset;
  wire subtract;
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1163 /* _012_ */ (
    .C(clk),
    .D(_008_[0]),
    .E(1'b1),
    .Q(add_or_sub[0]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1164 /* _013_ */ (
    .C(clk),
    .D(add_or_sub[0]),
    .E(1'b1),
    .Q(P[0]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1165 /* _014_ */ (
    .C(clk),
    .D(_008_[1]),
    .E(1'b1),
    .Q(add_or_sub[1]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1166 /* _015_ */ (
    .C(clk),
    .D(add_or_sub[1]),
    .E(1'b1),
    .Q(P[1]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1167 /* _016_ */ (
    .C(clk),
    .D(_008_[2]),
    .E(1'b1),
    .Q(add_or_sub[2]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1168 /* _017_ */ (
    .C(clk),
    .D(add_or_sub[2]),
    .E(1'b1),
    .Q(P[2]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1169 /* _018_ */ (
    .C(clk),
    .D(_008_[3]),
    .E(1'b1),
    .Q(add_or_sub[3]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1170 /* _019_ */ (
    .C(clk),
    .D(add_or_sub[3]),
    .E(1'b1),
    .Q(P[3]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1171 /* _020_ */ (
    .C(clk),
    .D(_008_[4]),
    .E(1'b1),
    .Q(add_or_sub[4]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1172 /* _021_ */ (
    .C(clk),
    .D(add_or_sub[4]),
    .E(1'b1),
    .Q(P[4]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1173 /* _022_ */ (
    .C(clk),
    .D(_008_[5]),
    .E(1'b1),
    .Q(add_or_sub[5]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1174 /* _023_ */ (
    .C(clk),
    .D(add_or_sub[5]),
    .E(1'b1),
    .Q(P[5]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1175 /* _024_ */ (
    .C(clk),
    .D(_008_[6]),
    .E(1'b1),
    .Q(add_or_sub[6]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1176 /* _025_ */ (
    .C(clk),
    .D(add_or_sub[6]),
    .E(1'b1),
    .Q(P[6]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1177 /* _026_ */ (
    .C(clk),
    .D(_008_[7]),
    .E(1'b1),
    .Q(add_or_sub[7]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1178 /* _027_ */ (
    .C(clk),
    .D(add_or_sub[7]),
    .E(1'b1),
    .Q(P[7]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1179 /* _028_ */ (
    .C(clk),
    .D(_008_[8]),
    .E(1'b1),
    .Q(add_or_sub[8]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1180 /* _029_ */ (
    .C(clk),
    .D(add_or_sub[8]),
    .E(1'b1),
    .Q(P[8]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1181 /* _030_ */ (
    .C(clk),
    .D(_008_[9]),
    .E(1'b1),
    .Q(add_or_sub[9]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1182 /* _031_ */ (
    .C(clk),
    .D(add_or_sub[9]),
    .E(1'b1),
    .Q(P[9]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1183 /* _032_ */ (
    .C(clk),
    .D(_008_[10]),
    .E(1'b1),
    .Q(add_or_sub[10]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1184 /* _033_ */ (
    .C(clk),
    .D(add_or_sub[10]),
    .E(1'b1),
    .Q(P[10]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1185 /* _034_ */ (
    .C(clk),
    .D(_008_[11]),
    .E(1'b1),
    .Q(add_or_sub[11]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1186 /* _035_ */ (
    .C(clk),
    .D(add_or_sub[11]),
    .E(1'b1),
    .Q(P[11]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1187 /* _036_ */ (
    .C(clk),
    .D(_008_[12]),
    .E(1'b1),
    .Q(add_or_sub[12]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1188 /* _037_ */ (
    .C(clk),
    .D(add_or_sub[12]),
    .E(1'b1),
    .Q(P[12]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1189 /* _038_ */ (
    .C(clk),
    .D(_008_[13]),
    .E(1'b1),
    .Q(add_or_sub[13]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1190 /* _039_ */ (
    .C(clk),
    .D(add_or_sub[13]),
    .E(1'b1),
    .Q(P[13]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1191 /* _040_ */ (
    .C(clk),
    .D(_008_[14]),
    .E(1'b1),
    .Q(add_or_sub[14]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1192 /* _041_ */ (
    .C(clk),
    .D(add_or_sub[14]),
    .E(1'b1),
    .Q(P[14]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1193 /* _042_ */ (
    .C(clk),
    .D(_008_[15]),
    .E(1'b1),
    .Q(add_or_sub[15]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1194 /* _043_ */ (
    .C(clk),
    .D(add_or_sub[15]),
    .E(1'b1),
    .Q(P[15]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1195 /* _044_ */ (
    .C(clk),
    .D(_008_[16]),
    .E(1'b1),
    .Q(add_or_sub[16]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1196 /* _045_ */ (
    .C(clk),
    .D(add_or_sub[16]),
    .E(1'b1),
    .Q(P[16]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1197 /* _046_ */ (
    .C(clk),
    .D(_008_[17]),
    .E(1'b1),
    .Q(add_or_sub[17]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1198 /* _047_ */ (
    .C(clk),
    .D(add_or_sub[17]),
    .E(1'b1),
    .Q(P[17]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1199 /* _048_ */ (
    .C(clk),
    .D(_008_[18]),
    .E(1'b1),
    .Q(add_or_sub[18]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1200 /* _049_ */ (
    .C(clk),
    .D(add_or_sub[18]),
    .E(1'b1),
    .Q(P[18]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1201 /* _050_ */ (
    .C(clk),
    .D(_011_[0]),
    .E(1'b1),
    .Q(add_or_sub[32]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1202 /* _051_ */ (
    .C(clk),
    .D(add_or_sub[32]),
    .E(1'b1),
    .Q(P[19]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1203 /* _052_ */ (
    .C(clk),
    .D(_011_[1]),
    .E(1'b1),
    .Q(add_or_sub[33]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1204 /* _053_ */ (
    .C(clk),
    .D(add_or_sub[33]),
    .E(1'b1),
    .Q(P[20]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1205 /* _054_ */ (
    .C(clk),
    .D(_011_[2]),
    .E(1'b1),
    .Q(add_or_sub[34]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1206 /* _055_ */ (
    .C(clk),
    .D(add_or_sub[34]),
    .E(1'b1),
    .Q(P[21]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1207 /* _056_ */ (
    .C(clk),
    .D(_011_[3]),
    .E(1'b1),
    .Q(add_or_sub[35]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1208 /* _057_ */ (
    .C(clk),
    .D(add_or_sub[35]),
    .E(1'b1),
    .Q(P[22]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1209 /* _058_ */ (
    .C(clk),
    .D(_011_[4]),
    .E(1'b1),
    .Q(add_or_sub[36]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1210 /* _059_ */ (
    .C(clk),
    .D(add_or_sub[36]),
    .E(1'b1),
    .Q(P[23]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1211 /* _060_ */ (
    .C(clk),
    .D(_011_[5]),
    .E(1'b1),
    .Q(add_or_sub[37]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1212 /* _061_ */ (
    .C(clk),
    .D(add_or_sub[37]),
    .E(1'b1),
    .Q(P[24]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1213 /* _062_ */ (
    .C(clk),
    .D(_011_[6]),
    .E(1'b1),
    .Q(add_or_sub[38]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1214 /* _063_ */ (
    .C(clk),
    .D(add_or_sub[38]),
    .E(1'b1),
    .Q(P[25]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1215 /* _064_ */ (
    .C(clk),
    .D(_011_[7]),
    .E(1'b1),
    .Q(add_or_sub[39]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1216 /* _065_ */ (
    .C(clk),
    .D(add_or_sub[39]),
    .E(1'b1),
    .Q(P[26]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1217 /* _066_ */ (
    .C(clk),
    .D(_011_[8]),
    .E(1'b1),
    .Q(add_or_sub[40]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1218 /* _067_ */ (
    .C(clk),
    .D(add_or_sub[40]),
    .E(1'b1),
    .Q(P[27]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1219 /* _068_ */ (
    .C(clk),
    .D(_011_[9]),
    .E(1'b1),
    .Q(add_or_sub[41]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1220 /* _069_ */ (
    .C(clk),
    .D(add_or_sub[41]),
    .E(1'b1),
    .Q(P[28]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1221 /* _070_ */ (
    .C(clk),
    .D(_011_[10]),
    .E(1'b1),
    .Q(add_or_sub[42]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1222 /* _071_ */ (
    .C(clk),
    .D(add_or_sub[42]),
    .E(1'b1),
    .Q(P[29]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1223 /* _072_ */ (
    .C(clk),
    .D(_011_[11]),
    .E(1'b1),
    .Q(add_or_sub[43]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1224 /* _073_ */ (
    .C(clk),
    .D(add_or_sub[43]),
    .E(1'b1),
    .Q(P[30]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1225 /* _074_ */ (
    .C(clk),
    .D(_011_[12]),
    .E(1'b1),
    .Q(add_or_sub[44]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1226 /* _075_ */ (
    .C(clk),
    .D(add_or_sub[44]),
    .E(1'b1),
    .Q(P[31]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1227 /* _076_ */ (
    .C(clk),
    .D(_011_[13]),
    .E(1'b1),
    .Q(add_or_sub[45]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1228 /* _077_ */ (
    .C(clk),
    .D(add_or_sub[45]),
    .E(1'b1),
    .Q(P[32]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1229 /* _078_ */ (
    .C(clk),
    .D(_011_[14]),
    .E(1'b1),
    .Q(add_or_sub[46]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1230 /* _079_ */ (
    .C(clk),
    .D(add_or_sub[46]),
    .E(1'b1),
    .Q(P[33]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1231 /* _080_ */ (
    .C(clk),
    .D(_011_[15]),
    .E(1'b1),
    .Q(add_or_sub[47]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1232 /* _081_ */ (
    .C(clk),
    .D(add_or_sub[47]),
    .E(1'b1),
    .Q(P[34]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1233 /* _082_ */ (
    .C(clk),
    .D(_011_[16]),
    .E(1'b1),
    .Q(add_or_sub[48]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1234 /* _083_ */ (
    .C(clk),
    .D(add_or_sub[48]),
    .E(1'b1),
    .Q(P[35]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1235 /* _084_ */ (
    .C(clk),
    .D(_011_[17]),
    .E(1'b1),
    .Q(add_or_sub[49]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1236 /* _085_ */ (
    .C(clk),
    .D(add_or_sub[49]),
    .E(1'b1),
    .Q(P[36]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1237 /* _086_ */ (
    .C(clk),
    .D(_011_[18]),
    .E(1'b1),
    .Q(add_or_sub[50]),
    .R(reset)
  );
  DFFRE $abc$1162$auto$blifparse.cc:377:parse_blif$1238 /* _087_ */ (
    .C(clk),
    .D(add_or_sub[50]),
    .E(1'b1),
    .Q(P[37]),
    .R(reset)
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3355 /* _088_ */ (
    .A({ add_or_sub[0], subtract, _005_[0], mult1[0] }),
    .Y(_007_[0])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3356 /* _089_ */ (
    .A({ add_or_sub[1], subtract, _005_[1], mult1[1] }),
    .Y(_007_[1])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3357 /* _090_ */ (
    .A({ add_or_sub[2], subtract, _005_[2], mult1[2] }),
    .Y(_007_[2])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3358 /* _091_ */ (
    .A({ add_or_sub[3], subtract, _005_[3], mult1[3] }),
    .Y(_007_[3])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3359 /* _092_ */ (
    .A({ add_or_sub[4], subtract, _005_[4], mult1[4] }),
    .Y(_007_[4])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3360 /* _093_ */ (
    .A({ add_or_sub[5], subtract, _005_[5], mult1[5] }),
    .Y(_007_[5])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3361 /* _094_ */ (
    .A({ add_or_sub[6], subtract, _005_[6], mult1[6] }),
    .Y(_007_[6])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3362 /* _095_ */ (
    .A({ add_or_sub[7], subtract, _005_[7], mult1[7] }),
    .Y(_007_[7])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3363 /* _096_ */ (
    .A({ add_or_sub[8], subtract, _005_[8], mult1[8] }),
    .Y(_007_[8])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3364 /* _097_ */ (
    .A({ add_or_sub[9], subtract, _005_[9], mult1[9] }),
    .Y(_007_[9])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3365 /* _098_ */ (
    .A({ add_or_sub[10], subtract, _005_[10], mult1[10] }),
    .Y(_007_[10])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3366 /* _099_ */ (
    .A({ add_or_sub[11], subtract, _005_[11], mult1[11] }),
    .Y(_007_[11])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3367 /* _100_ */ (
    .A({ add_or_sub[12], subtract, _005_[12], mult1[12] }),
    .Y(_007_[12])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3368 /* _101_ */ (
    .A({ add_or_sub[13], subtract, _005_[13], mult1[13] }),
    .Y(_007_[13])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3369 /* _102_ */ (
    .A({ add_or_sub[14], subtract, _005_[14], mult1[14] }),
    .Y(_007_[14])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3370 /* _103_ */ (
    .A({ add_or_sub[15], subtract, _005_[15], mult1[15] }),
    .Y(_007_[15])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3371 /* _104_ */ (
    .A({ add_or_sub[16], subtract, _005_[16], mult1[16] }),
    .Y(_007_[16])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3372 /* _105_ */ (
    .A({ add_or_sub[17], subtract, _005_[17], mult1[17] }),
    .Y(_007_[17])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3373 /* _106_ */ (
    .A({ add_or_sub[18], subtract, _005_[18], mult1[18] }),
    .Y(_007_[18])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3374 /* _107_ */ (
    .A({ add_or_sub[32], subtract, _002_[0], mult2[0] }),
    .Y(_010_[0])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3375 /* _108_ */ (
    .A({ add_or_sub[33], subtract, _002_[1], mult2[1] }),
    .Y(_010_[1])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3376 /* _109_ */ (
    .A({ add_or_sub[34], subtract, _002_[2], mult2[2] }),
    .Y(_010_[2])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3377 /* _110_ */ (
    .A({ add_or_sub[35], subtract, _002_[3], mult2[3] }),
    .Y(_010_[3])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3378 /* _111_ */ (
    .A({ add_or_sub[36], subtract, _002_[4], mult2[4] }),
    .Y(_010_[4])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3379 /* _112_ */ (
    .A({ add_or_sub[37], subtract, _002_[5], mult2[5] }),
    .Y(_010_[5])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3380 /* _113_ */ (
    .A({ add_or_sub[38], subtract, _002_[6], mult2[6] }),
    .Y(_010_[6])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3381 /* _114_ */ (
    .A({ add_or_sub[39], subtract, _002_[7], mult2[7] }),
    .Y(_010_[7])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3382 /* _115_ */ (
    .A({ add_or_sub[40], subtract, _002_[8], mult2[8] }),
    .Y(_010_[8])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3383 /* _116_ */ (
    .A({ add_or_sub[41], subtract, _002_[9], mult2[9] }),
    .Y(_010_[9])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3384 /* _117_ */ (
    .A({ add_or_sub[42], subtract, _002_[10], mult2[10] }),
    .Y(_010_[10])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3385 /* _118_ */ (
    .A({ add_or_sub[43], subtract, _002_[11], mult2[11] }),
    .Y(_010_[11])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3386 /* _119_ */ (
    .A({ add_or_sub[44], subtract, _002_[12], mult2[12] }),
    .Y(_010_[12])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3387 /* _120_ */ (
    .A({ add_or_sub[45], subtract, _002_[13], mult2[13] }),
    .Y(_010_[13])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3388 /* _121_ */ (
    .A({ add_or_sub[46], subtract, _002_[14], mult2[14] }),
    .Y(_010_[14])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3389 /* _122_ */ (
    .A({ add_or_sub[47], subtract, _002_[15], mult2[15] }),
    .Y(_010_[15])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3390 /* _123_ */ (
    .A({ add_or_sub[48], subtract, _002_[16], mult2[16] }),
    .Y(_010_[16])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3391 /* _124_ */ (
    .A({ add_or_sub[49], subtract, _002_[17], mult2[17] }),
    .Y(_010_[17])
  );
  \$lut  #(
    .LUT(16'b1010110001010011),
    .WIDTH(32'd4)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3392 /* _125_ */ (
    .A({ add_or_sub[50], subtract, _002_[18], mult2[18] }),
    .Y(_010_[18])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3393 /* _126_ */ (
    .A(mult1[0]),
    .Y(_003_[0])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3394 /* _127_ */ (
    .A(mult1[1]),
    .Y(_003_[1])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3395 /* _128_ */ (
    .A(mult1[2]),
    .Y(_003_[2])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3396 /* _129_ */ (
    .A(mult1[3]),
    .Y(_003_[3])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3397 /* _130_ */ (
    .A(mult1[4]),
    .Y(_003_[4])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3398 /* _131_ */ (
    .A(mult1[5]),
    .Y(_003_[5])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3399 /* _132_ */ (
    .A(mult1[6]),
    .Y(_003_[6])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3400 /* _133_ */ (
    .A(mult1[7]),
    .Y(_003_[7])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3401 /* _134_ */ (
    .A(mult1[8]),
    .Y(_003_[8])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3402 /* _135_ */ (
    .A(mult1[9]),
    .Y(_003_[9])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3403 /* _136_ */ (
    .A(mult1[10]),
    .Y(_003_[10])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3404 /* _137_ */ (
    .A(mult1[11]),
    .Y(_003_[11])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3405 /* _138_ */ (
    .A(mult1[12]),
    .Y(_003_[12])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3406 /* _139_ */ (
    .A(mult1[13]),
    .Y(_003_[13])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3407 /* _140_ */ (
    .A(mult1[14]),
    .Y(_003_[14])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3408 /* _141_ */ (
    .A(mult1[15]),
    .Y(_003_[15])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3409 /* _142_ */ (
    .A(mult1[16]),
    .Y(_003_[16])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3410 /* _143_ */ (
    .A(mult1[17]),
    .Y(_003_[17])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3411 /* _144_ */ (
    .A(mult1[18]),
    .Y(_003_[18])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3412 /* _145_ */ (
    .A(mult2[0]),
    .Y(_000_[0])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3413 /* _146_ */ (
    .A(mult2[1]),
    .Y(_000_[1])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3414 /* _147_ */ (
    .A(mult2[2]),
    .Y(_000_[2])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3415 /* _148_ */ (
    .A(mult2[3]),
    .Y(_000_[3])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3416 /* _149_ */ (
    .A(mult2[4]),
    .Y(_000_[4])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3417 /* _150_ */ (
    .A(mult2[5]),
    .Y(_000_[5])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3418 /* _151_ */ (
    .A(mult2[6]),
    .Y(_000_[6])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3419 /* _152_ */ (
    .A(mult2[7]),
    .Y(_000_[7])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3420 /* _153_ */ (
    .A(mult2[8]),
    .Y(_000_[8])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3421 /* _154_ */ (
    .A(mult2[9]),
    .Y(_000_[9])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3422 /* _155_ */ (
    .A(mult2[10]),
    .Y(_000_[10])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3423 /* _156_ */ (
    .A(mult2[11]),
    .Y(_000_[11])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3424 /* _157_ */ (
    .A(mult2[12]),
    .Y(_000_[12])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3425 /* _158_ */ (
    .A(mult2[13]),
    .Y(_000_[13])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3426 /* _159_ */ (
    .A(mult2[14]),
    .Y(_000_[14])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3427 /* _160_ */ (
    .A(mult2[15]),
    .Y(_000_[15])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3428 /* _161_ */ (
    .A(mult2[16]),
    .Y(_000_[16])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3429 /* _162_ */ (
    .A(mult2[17]),
    .Y(_000_[17])
  );
  \$lut  #(
    .LUT(2'b01),
    .WIDTH(32'd1)
  ) $abc$3354$auto$blifparse.cc:535:parse_blif$3430 /* _163_ */ (
    .A(mult2[18]),
    .Y(_000_[18])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[0].genblk1.my_adder /* _164_ */ (
    .CIN(_001_[0]),
    .COUT(_001_[1]),
    .G(1'b0),
    .O(_002_[0]),
    .P(_000_[0])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[10].genblk1.my_adder /* _165_ */ (
    .CIN(_001_[10]),
    .COUT(_001_[11]),
    .G(1'b0),
    .O(_002_[10]),
    .P(_000_[10])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[11].genblk1.my_adder /* _166_ */ (
    .CIN(_001_[11]),
    .COUT(_001_[12]),
    .G(1'b0),
    .O(_002_[11]),
    .P(_000_[11])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[12].genblk1.my_adder /* _167_ */ (
    .CIN(_001_[12]),
    .COUT(_001_[13]),
    .G(1'b0),
    .O(_002_[12]),
    .P(_000_[12])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[13].genblk1.my_adder /* _168_ */ (
    .CIN(_001_[13]),
    .COUT(_001_[14]),
    .G(1'b0),
    .O(_002_[13]),
    .P(_000_[13])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[14].genblk1.my_adder /* _169_ */ (
    .CIN(_001_[14]),
    .COUT(_001_[15]),
    .G(1'b0),
    .O(_002_[14]),
    .P(_000_[14])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[15].genblk1.my_adder /* _170_ */ (
    .CIN(_001_[15]),
    .COUT(_001_[16]),
    .G(1'b0),
    .O(_002_[15]),
    .P(_000_[15])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[16].genblk1.my_adder /* _171_ */ (
    .CIN(_001_[16]),
    .COUT(_001_[17]),
    .G(1'b0),
    .O(_002_[16]),
    .P(_000_[16])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[17].genblk1.my_adder /* _172_ */ (
    .CIN(_001_[17]),
    .COUT(_001_[18]),
    .G(1'b0),
    .O(_002_[17]),
    .P(_000_[17])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[18].genblk1.my_adder /* _173_ */ (
    .CIN(_001_[18]),
    .COUT(_001_[19]),
    .G(1'b0),
    .O(_002_[18]),
    .P(_000_[18])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[1].genblk1.my_adder /* _174_ */ (
    .CIN(_001_[1]),
    .COUT(_001_[2]),
    .G(1'b0),
    .O(_002_[1]),
    .P(_000_[1])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[2].genblk1.my_adder /* _175_ */ (
    .CIN(_001_[2]),
    .COUT(_001_[3]),
    .G(1'b0),
    .O(_002_[2]),
    .P(_000_[2])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[3].genblk1.my_adder /* _176_ */ (
    .CIN(_001_[3]),
    .COUT(_001_[4]),
    .G(1'b0),
    .O(_002_[3]),
    .P(_000_[3])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[4].genblk1.my_adder /* _177_ */ (
    .CIN(_001_[4]),
    .COUT(_001_[5]),
    .G(1'b0),
    .O(_002_[4]),
    .P(_000_[4])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[5].genblk1.my_adder /* _178_ */ (
    .CIN(_001_[5]),
    .COUT(_001_[6]),
    .G(1'b0),
    .O(_002_[5]),
    .P(_000_[5])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[6].genblk1.my_adder /* _179_ */ (
    .CIN(_001_[6]),
    .COUT(_001_[7]),
    .G(1'b0),
    .O(_002_[6]),
    .P(_000_[6])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[7].genblk1.my_adder /* _180_ */ (
    .CIN(_001_[7]),
    .COUT(_001_[8]),
    .G(1'b0),
    .O(_002_[7]),
    .P(_000_[7])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[8].genblk1.my_adder /* _181_ */ (
    .CIN(_001_[8]),
    .COUT(_001_[9]),
    .G(1'b0),
    .O(_002_[8]),
    .P(_000_[8])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.genblk1.slice[9].genblk1.my_adder /* _182_ */ (
    .CIN(_001_[9]),
    .COUT(_001_[10]),
    .G(1'b0),
    .O(_002_[9]),
    .P(_000_[9])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$42.intermediate_adder /* _183_ */ (
    .COUT(_001_[0]),
    .G(1'b1),
    .P(1'b0)
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[0].genblk1.my_adder /* _184_ */ (
    .CIN(_004_[0]),
    .COUT(_004_[1]),
    .G(1'b0),
    .O(_005_[0]),
    .P(_003_[0])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[10].genblk1.my_adder /* _185_ */ (
    .CIN(_004_[10]),
    .COUT(_004_[11]),
    .G(1'b0),
    .O(_005_[10]),
    .P(_003_[10])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[11].genblk1.my_adder /* _186_ */ (
    .CIN(_004_[11]),
    .COUT(_004_[12]),
    .G(1'b0),
    .O(_005_[11]),
    .P(_003_[11])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[12].genblk1.my_adder /* _187_ */ (
    .CIN(_004_[12]),
    .COUT(_004_[13]),
    .G(1'b0),
    .O(_005_[12]),
    .P(_003_[12])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[13].genblk1.my_adder /* _188_ */ (
    .CIN(_004_[13]),
    .COUT(_004_[14]),
    .G(1'b0),
    .O(_005_[13]),
    .P(_003_[13])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[14].genblk1.my_adder /* _189_ */ (
    .CIN(_004_[14]),
    .COUT(_004_[15]),
    .G(1'b0),
    .O(_005_[14]),
    .P(_003_[14])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[15].genblk1.my_adder /* _190_ */ (
    .CIN(_004_[15]),
    .COUT(_004_[16]),
    .G(1'b0),
    .O(_005_[15]),
    .P(_003_[15])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[16].genblk1.my_adder /* _191_ */ (
    .CIN(_004_[16]),
    .COUT(_004_[17]),
    .G(1'b0),
    .O(_005_[16]),
    .P(_003_[16])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[17].genblk1.my_adder /* _192_ */ (
    .CIN(_004_[17]),
    .COUT(_004_[18]),
    .G(1'b0),
    .O(_005_[17]),
    .P(_003_[17])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[18].genblk1.my_adder /* _193_ */ (
    .CIN(_004_[18]),
    .COUT(_004_[19]),
    .G(1'b0),
    .O(_005_[18]),
    .P(_003_[18])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[1].genblk1.my_adder /* _194_ */ (
    .CIN(_004_[1]),
    .COUT(_004_[2]),
    .G(1'b0),
    .O(_005_[1]),
    .P(_003_[1])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[2].genblk1.my_adder /* _195_ */ (
    .CIN(_004_[2]),
    .COUT(_004_[3]),
    .G(1'b0),
    .O(_005_[2]),
    .P(_003_[2])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[3].genblk1.my_adder /* _196_ */ (
    .CIN(_004_[3]),
    .COUT(_004_[4]),
    .G(1'b0),
    .O(_005_[3]),
    .P(_003_[3])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[4].genblk1.my_adder /* _197_ */ (
    .CIN(_004_[4]),
    .COUT(_004_[5]),
    .G(1'b0),
    .O(_005_[4]),
    .P(_003_[4])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[5].genblk1.my_adder /* _198_ */ (
    .CIN(_004_[5]),
    .COUT(_004_[6]),
    .G(1'b0),
    .O(_005_[5]),
    .P(_003_[5])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[6].genblk1.my_adder /* _199_ */ (
    .CIN(_004_[6]),
    .COUT(_004_[7]),
    .G(1'b0),
    .O(_005_[6]),
    .P(_003_[6])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[7].genblk1.my_adder /* _200_ */ (
    .CIN(_004_[7]),
    .COUT(_004_[8]),
    .G(1'b0),
    .O(_005_[7]),
    .P(_003_[7])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[8].genblk1.my_adder /* _201_ */ (
    .CIN(_004_[8]),
    .COUT(_004_[9]),
    .G(1'b0),
    .O(_005_[8]),
    .P(_003_[8])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.genblk1.slice[9].genblk1.my_adder /* _202_ */ (
    .CIN(_004_[9]),
    .COUT(_004_[10]),
    .G(1'b0),
    .O(_005_[9]),
    .P(_003_[9])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$45.intermediate_adder /* _203_ */ (
    .COUT(_004_[0]),
    .G(1'b1),
    .P(1'b0)
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[0].genblk1.my_adder /* _204_ */ (
    .CIN(_006_[0]),
    .COUT(_006_[1]),
    .G(add_or_sub[0]),
    .O(_008_[0]),
    .P(_007_[0])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[10].genblk1.my_adder /* _205_ */ (
    .CIN(_006_[10]),
    .COUT(_006_[11]),
    .G(add_or_sub[10]),
    .O(_008_[10]),
    .P(_007_[10])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[11].genblk1.my_adder /* _206_ */ (
    .CIN(_006_[11]),
    .COUT(_006_[12]),
    .G(add_or_sub[11]),
    .O(_008_[11]),
    .P(_007_[11])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[12].genblk1.my_adder /* _207_ */ (
    .CIN(_006_[12]),
    .COUT(_006_[13]),
    .G(add_or_sub[12]),
    .O(_008_[12]),
    .P(_007_[12])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[13].genblk1.my_adder /* _208_ */ (
    .CIN(_006_[13]),
    .COUT(_006_[14]),
    .G(add_or_sub[13]),
    .O(_008_[13]),
    .P(_007_[13])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[14].genblk1.my_adder /* _209_ */ (
    .CIN(_006_[14]),
    .COUT(_006_[15]),
    .G(add_or_sub[14]),
    .O(_008_[14]),
    .P(_007_[14])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[15].genblk1.my_adder /* _210_ */ (
    .CIN(_006_[15]),
    .COUT(_006_[16]),
    .G(add_or_sub[15]),
    .O(_008_[15]),
    .P(_007_[15])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[16].genblk1.my_adder /* _211_ */ (
    .CIN(_006_[16]),
    .COUT(_006_[17]),
    .G(add_or_sub[16]),
    .O(_008_[16]),
    .P(_007_[16])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[17].genblk1.my_adder /* _212_ */ (
    .CIN(_006_[17]),
    .COUT(_006_[18]),
    .G(add_or_sub[17]),
    .O(_008_[17]),
    .P(_007_[17])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[18].genblk1.my_adder /* _213_ */ (
    .CIN(_006_[18]),
    .COUT(_006_[19]),
    .G(add_or_sub[18]),
    .O(_008_[18]),
    .P(_007_[18])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[1].genblk1.my_adder /* _214_ */ (
    .CIN(_006_[1]),
    .COUT(_006_[2]),
    .G(add_or_sub[1]),
    .O(_008_[1]),
    .P(_007_[1])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[2].genblk1.my_adder /* _215_ */ (
    .CIN(_006_[2]),
    .COUT(_006_[3]),
    .G(add_or_sub[2]),
    .O(_008_[2]),
    .P(_007_[2])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[3].genblk1.my_adder /* _216_ */ (
    .CIN(_006_[3]),
    .COUT(_006_[4]),
    .G(add_or_sub[3]),
    .O(_008_[3]),
    .P(_007_[3])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[4].genblk1.my_adder /* _217_ */ (
    .CIN(_006_[4]),
    .COUT(_006_[5]),
    .G(add_or_sub[4]),
    .O(_008_[4]),
    .P(_007_[4])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[5].genblk1.my_adder /* _218_ */ (
    .CIN(_006_[5]),
    .COUT(_006_[6]),
    .G(add_or_sub[5]),
    .O(_008_[5]),
    .P(_007_[5])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[6].genblk1.my_adder /* _219_ */ (
    .CIN(_006_[6]),
    .COUT(_006_[7]),
    .G(add_or_sub[6]),
    .O(_008_[6]),
    .P(_007_[6])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[7].genblk1.my_adder /* _220_ */ (
    .CIN(_006_[7]),
    .COUT(_006_[8]),
    .G(add_or_sub[7]),
    .O(_008_[7]),
    .P(_007_[7])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[8].genblk1.my_adder /* _221_ */ (
    .CIN(_006_[8]),
    .COUT(_006_[9]),
    .G(add_or_sub[8]),
    .O(_008_[8]),
    .P(_007_[8])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.genblk1.slice[9].genblk1.my_adder /* _222_ */ (
    .CIN(_006_[9]),
    .COUT(_006_[10]),
    .G(add_or_sub[9]),
    .O(_008_[9]),
    .P(_007_[9])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$48.intermediate_adder /* _223_ */ (
    .COUT(_006_[0]),
    .G(1'b1),
    .P(1'b0)
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[0].genblk1.my_adder /* _224_ */ (
    .CIN(_009_[0]),
    .COUT(_009_[1]),
    .G(add_or_sub[32]),
    .O(_011_[0]),
    .P(_010_[0])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[10].genblk1.my_adder /* _225_ */ (
    .CIN(_009_[10]),
    .COUT(_009_[11]),
    .G(add_or_sub[42]),
    .O(_011_[10]),
    .P(_010_[10])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[11].genblk1.my_adder /* _226_ */ (
    .CIN(_009_[11]),
    .COUT(_009_[12]),
    .G(add_or_sub[43]),
    .O(_011_[11]),
    .P(_010_[11])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[12].genblk1.my_adder /* _227_ */ (
    .CIN(_009_[12]),
    .COUT(_009_[13]),
    .G(add_or_sub[44]),
    .O(_011_[12]),
    .P(_010_[12])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[13].genblk1.my_adder /* _228_ */ (
    .CIN(_009_[13]),
    .COUT(_009_[14]),
    .G(add_or_sub[45]),
    .O(_011_[13]),
    .P(_010_[13])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[14].genblk1.my_adder /* _229_ */ (
    .CIN(_009_[14]),
    .COUT(_009_[15]),
    .G(add_or_sub[46]),
    .O(_011_[14]),
    .P(_010_[14])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[15].genblk1.my_adder /* _230_ */ (
    .CIN(_009_[15]),
    .COUT(_009_[16]),
    .G(add_or_sub[47]),
    .O(_011_[15]),
    .P(_010_[15])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[16].genblk1.my_adder /* _231_ */ (
    .CIN(_009_[16]),
    .COUT(_009_[17]),
    .G(add_or_sub[48]),
    .O(_011_[16]),
    .P(_010_[16])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[17].genblk1.my_adder /* _232_ */ (
    .CIN(_009_[17]),
    .COUT(_009_[18]),
    .G(add_or_sub[49]),
    .O(_011_[17]),
    .P(_010_[17])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[18].genblk1.my_adder /* _233_ */ (
    .CIN(_009_[18]),
    .COUT(_009_[19]),
    .G(add_or_sub[50]),
    .O(_011_[18]),
    .P(_010_[18])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[1].genblk1.my_adder /* _234_ */ (
    .CIN(_009_[1]),
    .COUT(_009_[2]),
    .G(add_or_sub[33]),
    .O(_011_[1]),
    .P(_010_[1])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[2].genblk1.my_adder /* _235_ */ (
    .CIN(_009_[2]),
    .COUT(_009_[3]),
    .G(add_or_sub[34]),
    .O(_011_[2]),
    .P(_010_[2])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[3].genblk1.my_adder /* _236_ */ (
    .CIN(_009_[3]),
    .COUT(_009_[4]),
    .G(add_or_sub[35]),
    .O(_011_[3]),
    .P(_010_[3])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[4].genblk1.my_adder /* _237_ */ (
    .CIN(_009_[4]),
    .COUT(_009_[5]),
    .G(add_or_sub[36]),
    .O(_011_[4]),
    .P(_010_[4])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[5].genblk1.my_adder /* _238_ */ (
    .CIN(_009_[5]),
    .COUT(_009_[6]),
    .G(add_or_sub[37]),
    .O(_011_[5]),
    .P(_010_[5])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[6].genblk1.my_adder /* _239_ */ (
    .CIN(_009_[6]),
    .COUT(_009_[7]),
    .G(add_or_sub[38]),
    .O(_011_[6]),
    .P(_010_[6])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[7].genblk1.my_adder /* _240_ */ (
    .CIN(_009_[7]),
    .COUT(_009_[8]),
    .G(add_or_sub[39]),
    .O(_011_[7]),
    .P(_010_[7])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[8].genblk1.my_adder /* _241_ */ (
    .CIN(_009_[8]),
    .COUT(_009_[9]),
    .G(add_or_sub[40]),
    .O(_011_[8]),
    .P(_010_[8])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.genblk1.slice[9].genblk1.my_adder /* _242_ */ (
    .CIN(_009_[9]),
    .COUT(_009_[10]),
    .G(add_or_sub[41]),
    .O(_011_[9]),
    .P(_010_[9])
  );
  CARRY $auto$alumacc.cc:491:replace_alu$51.intermediate_adder /* _243_ */ (
    .COUT(_009_[0]),
    .G(1'b1),
    .P(1'b0)
  );
  DSP19X2 #(
    .COEFF1_0(10'b0000000000),
    .COEFF1_1(10'b0000000000),
    .COEFF1_2(10'b0000000000),
    .COEFF1_3(10'b0000000000),
    .COEFF2_0(10'b0000000000),
    .COEFF2_1(10'b0000000000),
    .COEFF2_2(10'b0000000000),
    .COEFF2_3(10'b0000000000),
    .DSP_MODE("MULTIPLY"),
    .INPUT_REG_EN("FALSE"),
    .OUTPUT_REG_EN("FALSE")
  ) \simd_$mul$/nfs_scratch/scratch/CompilerValidation/abdul_hameed/16July/Validation/RTL_testcases/DSP_inference19x2/dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2/results_dir/.././rtl/dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2.v:17$3_$mul$/nfs_scratch/scratch/CompilerValidation/abdul_hameed/16July/Validation/RTL_testcases/DSP_inference19x2/dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2/results_dir/.././rtl/dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2.v:18$4 /* \simd_$mul$/nfs_scratch/scratch/CompilerValidation/abdul_hameed/16July/Validation/RTL_testcases/DSP_inference19x2/dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2/results_dir/.././rtl/dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2.v:17$3_$mul$/nfs_scratch/scratch/CompilerValidation/abdul_hameed/16July/Validation/RTL_testcases/DSP_inference19x2/dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2/results_dir/.././rtl/dsp_mult_accum_input_not_registered_output_registered_inf_dsp19x2.v:18$4  */ (
    .A1(A1),
    .A2(A2),
    .B1(B1),
    .B2(B2),
    .FEEDBACK(3'b000),
    .UNSIGNED_A(1'b1),
    .UNSIGNED_B(1'b1),
    .Z1(mult1),
    .Z2(mult2)
  );
  assign _000_[31:19] = 13'b1111111111111;
  assign _001_[31] = _001_[32];
  assign _002_[30] = _002_[31];
  assign _003_[31:19] = 13'b1111111111111;
  assign _004_[31] = _004_[32];
  assign _005_[30] = _005_[31];
  assign { add_or_sub[63:51], add_or_sub[31:19] } = 26'bxxxxxxxxxxxxxxxxxxxxxxxxxx;
endmodule
